#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <400>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <900>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};


/ {

   behaviors {
        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    hrl: hrl {
        compatible = "zmk,behavior-hold-tap";
        label = "HRL";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <150>;
        hold-trigger-key-positions = <57 56 55 7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 59 60 61 62 63>;
        flavor = "balanced";
    };

    hrr: hrr {
        compatible = "zmk,behavior-hold-tap";
        label = "HRR";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <280>;
        quick-tap-ms = <150>;
        flavor = "balanced";
        hold-trigger-key-positions = <61 60 59 0 1 2 3 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 52 57>;
    };

    combos {
        compatible = "zmk,combos";

        Sleep {
            bindings = <&kp K_SLEEP>;
            key-positions = <0 12>;
        };
    };


    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC     &kp N1     &kp N2           &kp N3             &kp N4        &kp N5       &kp UP_ARROW     &kp N6     &kp N7        &kp N8              &kp N9            &kp N0     &kp BACKSPACE
&kp TAB     &kp Q      &kp W            &kp E              &kp R         &kp T        &kp DOWN_ARROW   &kp Y      &kp U         &kp I               &kp O             &kp P      &kp DELETE
&kp LSHFT   &kp A      &hrl LEFT_ALT S  &hrl LEFT_SHIFT D  &hrl LCTRL F  &kp G        &kp LEFT_ARROW   &kp H      &hrr RCTRL J  &hrr RIGHT_SHIFT K  &hrr RIGHT_ALT L  &kp SEMI   &kp APOS
&kp LCTRL   &kp Z      &kp X            &kp C              &kp V         &kp B        &kp RIGHT_ARROW  &kp N      &kp M         &kp COMMA           &kp DOT           &kp FSLH   &kp ENTER
&kp C_MUTE  &kp GRAVE  &kp LEFT_GUI     &kp LEFT_ALT       &mo 1         &kp SPACE    &kp SPACE        &kp SPACE  &mo 2         &kp ENTER           &kp LEFT_ARROW    &kp RIGHT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE   &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7           &kp F8      &kp F9     &kp F10           &trans
&trans      &kp GRAVE        &mkp LCLK       &mkp MCLK        &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN   &kp PG_UP        &kp HOME         &kp UP      &kp END    &kp MINUS         &kp EQUAL
&trans      &kp TILDE        &trans          &trans           &trans           &mkp MB5           &mmv MOVE_LEFT   &kp PG_DN        &kp LEFT         &kp DOWN    &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans      &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT  &kp F11    &kp F12           &trans
&kp C_MUTE  &trans           &trans          &trans           &trans           &trans             &mkp LCLK        &trans           &trans           &trans      &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp TILDE     &bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4       &mmv MOVE_UP     &kp F6            &kp F7             &kp F8         &kp F9            &kp F10            &kp F11
&bt BT_CLR    &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5       &mmv MOVE_DOWN   &kp NUMBER_6      &kp NUMBER_7       &kp NUMBER_8   &kp NUMBER_9      &kp NUMBER_0       &kp F12
&out OUT_USB  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT        &mmv MOVE_LEFT   &trans            &kp MINUS          &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH
&out OUT_BLE  &kp K_UNDO       &kp K_CUT     &kp K_COPY    &kp K_PASTE   &kp RIGHT_BRACE    &mmv MOVE_RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SEMICOLON  &kp COLON         &bootloader        &trans
&trans        &bt BT_CLR_ALL   &trans        &trans        &trans        &trans             &mkp LCLK        &trans            &trans             &trans         &trans            &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};

